"use strict";(self.webpackChunkhydrolang_training=self.webpackChunkhydrolang_training||[]).push([[107],{3833:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=t(7462),r=(t(7294),t(3905)),i=t(9423);const s={sidebar_position:2},l="Hydro",o={unversionedId:"tutorial/analyze/hydro",id:"tutorial/analyze/hydro",title:"Hydro",description:"The Hydro component contains functions for implementing simple and advanced hydrological applications, including, but not limited to, rainfall temporal aggregators, synthetic rainfall generators, a simple bucket model, area Thiessen polygon rainfall distribution, and simple static and dynamic groundwater solute solvers. Let\u2019s explore some of these functions.",source:"@site/docs/tutorial/analyze/hydro.mdx",sourceDirName:"tutorial/analyze",slug:"/tutorial/analyze/hydro",permalink:"/tutorials/hydrolang/build/index.html/docs/tutorial/analyze/hydro",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Stats",permalink:"/tutorials/hydrolang/build/index.html/docs/tutorial/analyze/stats"},next:{title:"NN",permalink:"/tutorials/hydrolang/build/index.html/docs/tutorial/analyze/nn"}},d={},p=[{value:"Exercise 1",id:"exercise-1",level:2},{value:"Exercise 2",id:"exercise-2",level:2},{value:"Exercise 3",id:"exercise-3",level:2},{value:"Exercise 4",id:"exercise-4",level:2},{value:"Exercise 5",id:"exercise-5",level:2}],c={toc:p},m="wrapper";function h(n){let{components:e,...t}=n;return(0,r.kt)(m,(0,a.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hydro"},"Hydro"),(0,r.kt)("p",null,"The Hydro component contains functions for implementing simple and advanced hydrological applications, including, but not limited to, rainfall temporal aggregators, synthetic rainfall generators, a simple bucket model, area Thiessen polygon rainfall distribution, and simple static and dynamic groundwater solute solvers. Let\u2019s explore some of these functions."),(0,r.kt)("h2",{id:"exercise-1"},"Exercise 1"),(0,r.kt)("p",null,"Let's generate some random data for rainfall distribution using the ",(0,r.kt)("a",{parentName:"p",href:"https://glossary.ametsoc.org/wiki/Thiessen_polygon_method"},"Thiessen method"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let dist_rainf = hydro.thiessen({\n  params: { areas: [30, 40, 50, 60] },\n  data: [[1,2,3,4], [1,2], [1,2,3,6,5]]\n});\n")),(0,r.kt)(i.xR,{template:"vanilla",options:{showTabs:!0,showLineNumbers:!0,showInlineErrors:!0,externalResources:["https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"]},files:{"src/index.js":{code:"",hidden:!0,active:!1},"src/main.js":{code:"const hydrolang = new Hydrolang();\nconst {hydro, stats, nn} = hydrolang.analyze;\nconst main = async () => {\n  let dist_rainf = hydro.thiessen({\n    params: { areas: [30, 40, 50, 60] },\n    data: [[1,2,3,4], [1,2], [1,2,3,6,5]]\n  });\n  //hydrolang.visualize.draw({ params: { type: 'json' }, data: dist_rainf})\n};\nmain();",hidden:!1,active:!0},"index.html":'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <script src="https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"><\/script>\n    <title>My HydroLang Example</title>\n  </head>\n  <body>\n    <script src="src/main.js"><\/script>\n  </body>\n</html>',"package.json":{code:'{\n  "name": "examples",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.html",\n  "scripts": {\n    "start": "parcel index.html --open",\n    "build": "parcel build index.html"\n  },\n  "dependencies": {\n    "parcel-bundler": "^1.6.1"\n  },\n  "devDependencies": {\n    "@babel/core": "7.2.0",\n    "typescript": "4.4.4"\n  },\n  "resolutions": {\n    "@babel/preset-env": "7.13.8"\n  },\n  "keywords": []\n}',hidden:!0,active:!1}},mdxType:"Sandpack"}),(0,r.kt)("br",null),(0,r.kt)("admonition",{title:"Note",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The function can redistribute rainfall over different areas given as an array. If there are m areas and n rainfall events passed with m > n, then it is assumed that over the m-n areas, there was no rainfall, and new arrays filled with 0s are pushed into the data.")),(0,r.kt)("h2",{id:"exercise-2"},"Exercise 2"),(0,r.kt)("p",null,"We can create ",(0,r.kt)("a",{parentName:"p",href:"https://www.engr.colostate.edu/~ramirez/ce_old/classes/ce522_ramirez/snyder/snyder_uh.htm"},"synthetic information")," based on the physical characteristics of a basin to generate unit and flooding hydrographs to determine what would happen during a rainfall event. For example, we can generate retention and concentration values for a basin using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let synthetic_times_metric = hydro.syntheticalc({\n  params: { type: "SCS", unit: "m" },\n  args: { l: 1500, slope: 2, cn: 80 },\n});//returns max retention (mm), time of concentration, peak and lag time (hrs)\n')),(0,r.kt)("p",null,"For this particular calculation, we are considering the following conditions:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Open to view the available parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Units"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:null},"The type of hydrologic calculation to perform."),(0,r.kt)("td",{parentName:"tr",align:null},"string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"unit")),(0,r.kt)("td",{parentName:"tr",align:null},"The unit system to use"),(0,r.kt)("td",{parentName:"tr",align:null},"string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"l")),(0,r.kt)("td",{parentName:"tr",align:null},"The longitude of the catchment"),(0,r.kt)("td",{parentName:"tr",align:null},"meters or feet")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"slope")),(0,r.kt)("td",{parentName:"tr",align:null},"The average slope of the catchment"),(0,r.kt)("td",{parentName:"tr",align:null},"percentage")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"cn")),(0,r.kt)("td",{parentName:"tr",align:null},"The SCS curve number of the catchment"),(0,r.kt)("td",{parentName:"tr",align:null},"-"))))),(0,r.kt)("p",null,"The result can be used to construct flooding hydrographs based on a few physical characteristics of the watershed."),(0,r.kt)(i.xR,{template:"vanilla",options:{showTabs:!0,showLineNumbers:!0,showInlineErrors:!0,externalResources:["https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"]},files:{"src/index.js":{code:"",hidden:!0,active:!1},"src/main.js":{code:'const hydrolang = new Hydrolang();\nconst {hydro, stats, nn} = hydrolang.analyze;\nconst main = async () => {\n  let synthetic_times_metric = hydro.syntheticalc({\n    params: { type: "SCS", unit: "m" },\n    args: { l: 1500, slope: 2, cn: 80 },\n  });\n  //hydrolang.visualize.draw({ params: { type: \'json\' }, data: synthetic_times_metric})\n};\nmain();',hidden:!1,active:!0},"index.html":'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <script src="https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"><\/script>\n    <title>My HydroLang Example</title>\n  </head>\n  <body>\n    <script src="src/main.js"><\/script>\n  </body>\n</html>',"package.json":{code:'{\n  "name": "examples",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.html",\n  "scripts": {\n    "start": "parcel index.html --open",\n    "build": "parcel build index.html"\n  },\n  "dependencies": {\n    "parcel-bundler": "^1.6.1"\n  },\n  "devDependencies": {\n    "@babel/core": "7.2.0",\n    "typescript": "4.4.4"\n  },\n  "resolutions": {\n    "@babel/preset-env": "7.13.8"\n  },\n  "keywords": []\n}',hidden:!0,active:!1}},mdxType:"Sandpack"}),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"exercise-3"},"Exercise 3"),(0,r.kt)("p",null,"Let\u2019s explore creating a ",(0,r.kt)("a",{parentName:"p",href:"https://www.nohrsc.noaa.gov/technology/gis/uhg_manual.html"},"dimensionless unit hydrograph")," based on a gamma distribution:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let dimGamma = hydro.dimunithydro({\n  params: { timeStep: 0.1, numhours: 24 },\n  args: { type: "gamma", prf: 238 }\n});\n')),(0,r.kt)("admonition",{title:"Note",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Pearson Type III and Weibull distributions are also available, given the appropriate arguments.")),(0,r.kt)("p",null,"With the created dimensionless unit hydrograph, we can construct an empirical unit hydrograph using time of concentration, drainage area, and peak rate factor for a region of interest as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let myUnitHydro = hydro.unithydrocons({\n  params: {\n    type: "dim", // dimensionless hydrograph\n    units: "si", // SI unit system\n    drainagearea: 50 // drainage area in hectares\n  },\n  args: {\n    peak: 0.92, // peak rate factor\n    tconcentration: 2.5 // time of concentration in hours\n  },\n  data: dimGamma\n});\n')),(0,r.kt)(i.xR,{template:"vanilla",options:{showTabs:!0,showLineNumbers:!0,showInlineErrors:!0,externalResources:["https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"]},files:{"src/index.js":{code:"",hidden:!0,active:!1},"src/main.js":{code:'const hydrolang = new Hydrolang();\nconst {hydro, stats, nn} = hydrolang.analyze;\nconst main = async () => {\n  let dimGamma = hydro.dimunithydro({\n    params: { timeStep: 0.1, numhours: 24 },\n    args: { type: "gamma", prf: 238 }\n  });\n  let myUnitHydro = hydro.unithydrocons({\n    params: {\n      type: "dim", // dimensionless hydrograph\n      units: "si", // SI unit system\n      drainagearea: 50 // drainage area in hectares\n    },\n    args: {\n      peak: 0.92, // peak rate factor\n      tconcentration: 2.5 // time of concentration in hours\n    },\n    data: dimGamma\n  });\n  //hydrolang.visualize.draw({ params: { type: \'chart\' }, data: myUnitHydro})\n};\nmain();',hidden:!1,active:!0},"index.html":'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <script src="https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"><\/script>\n    <title>My HydroLang Example</title>\n  </head>\n  <body>\n    <script src="src/main.js"><\/script>\n  </body>\n</html>',"package.json":{code:'{\n  "name": "examples",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.html",\n  "scripts": {\n    "start": "parcel index.html --open",\n    "build": "parcel build index.html"\n  },\n  "dependencies": {\n    "parcel-bundler": "^1.6.1"\n  },\n  "devDependencies": {\n    "@babel/core": "7.2.0",\n    "typescript": "4.4.4"\n  },\n  "resolutions": {\n    "@babel/preset-env": "7.13.8"\n  },\n  "keywords": []\n}',hidden:!0,active:!1}},mdxType:"Sandpack"}),(0,r.kt)("br",null),(0,r.kt)("admonition",{title:"Tip",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The function can also create a unit hydrograph from an observed event if available.")),(0,r.kt)("h2",{id:"exercise-4"},"Exercise 4"),(0,r.kt)("p",null,"The Hydro component also contains functions for rainfall data manipulation. For example, we can aggregate rainfall time series given a specific interval:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let agg_rain = hydro.rainaggr({\n  params: { type: 'aggr', interval: 120 },\n  data: [\n    ['2023-05-01 00:00:00', '2023-05-01 01:00:00', '2023-05-01 02:00:00', '2023-05-01 03:00:00'],\n    [10, 20, 5, 30]\n  ]\n});\n")),(0,r.kt)("admonition",{title:"Note",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"There is also a rainfall disaggregation function implemented within the hydro component which uses either a statistical distribution or a machine learning model trained for specific functions. An example of the latter will be shown in the NN component.")),(0,r.kt)("p",null,"We can generate a hyetograph for a given duration and timestep, and also provide rainfall data in mm to infer hyetograph intensity in mm/hr (or SI units)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let hyeto = hydro.hyetogen({ params: {\n  duration: 3600, // duration in seconds\n  timestep: 60 // timestep in seconds\n}\n, data: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]//mm \n    }); //mm/hr\n")),(0,r.kt)(i.xR,{template:"vanilla",options:{showTabs:!0,showLineNumbers:!0,showInlineErrors:!0,externalResources:["https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"]},files:{"src/index.js":{code:"",hidden:!0,active:!1},"src/main.js":{code:"const hydrolang = new Hydrolang();\nconst {hydro, stats, nn} = hydrolang.analyze;\nconst main = async () => {\n  let agg_rain = hydro.rainaggr({\n    params: { type: 'aggr', interval: 120 },\n    data: [\n      ['2023-05-01 00:00:00', '2023-05-01 01:00:00', '2023-05-01 02:00:00', '2023-05-01 03:00:00'],\n      [10, 20, 5, 30]\n    ]\n  });\n  let hyeto = hydro.hyetogen({ \n    params: {\n      duration: 3600, // duration in seconds\n      timestep: 60 // timestep in seconds\n    }, \n    data: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]//mm \n  });\n  //hydrolang.visualize.draw({ params: { type: 'json' }, data: agg_rain})\n  //hydrolang.visualize.draw({ params: { type: 'json' }, data: hyeto})\n};\nmain();",hidden:!1,active:!0},"index.html":'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <script src="https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"><\/script>\n    <title>My HydroLang Example</title>\n  </head>\n  <body>\n    <script src="src/main.js"><\/script>\n  </body>\n</html>',"package.json":{code:'{\n  "name": "examples",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.html",\n  "scripts": {\n    "start": "parcel index.html --open",\n    "build": "parcel build index.html"\n  },\n  "dependencies": {\n    "parcel-bundler": "^1.6.1"\n  },\n  "devDependencies": {\n    "@babel/core": "7.2.0",\n    "typescript": "4.4.4"\n  },\n  "resolutions": {\n    "@babel/preset-env": "7.13.8"\n  },\n  "keywords": []\n}',hidden:!0,active:!1}},mdxType:"Sandpack"}),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"exercise-5"},"Exercise 5"),(0,r.kt)("p",null,"Finally, there is  simple model for runoff in a watershed considering an ",(0,r.kt)("a",{parentName:"p",href:"https://www.cpc.ncep.noaa.gov/soilmst/global/"},"empirical bucket")," for rainfall, evapotranspiration, and constant baseflow throughout different landscapes. We can use the function to assess impacts on runoff from different land uses."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let bucket_runoff = hydro.bucketmodel({\n  params: {\n    baseflow: 10, // m\xb3/s\n    infiltration: 0.1 // mm/hour\n  },\n  args: {\n    agriculture: 0.3, // percent\n    barerock: 0.1, // percent\n    grassland: 0.2, // percent\n    forest: 0.3, // percent\n    urban: 0.1 // percent\n  },\n  data: {\n    rainfall: [10, 20, 30, 40, 50], // mm\n    evaporation: [5, 10, 15, 20, 25] // mm\n  }\n});\n")),(0,r.kt)(i.xR,{template:"vanilla",options:{showTabs:!0,showLineNumbers:!0,showInlineErrors:!0,externalResources:["https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"]},files:{"src/index.js":{code:"",hidden:!0,active:!1},"src/main.js":{code:"const hydrolang = new Hydrolang();\nconst {hydro, stats, nn} = hydrolang.analyze;\nconst main = async () => {\n  let bucket_runoff = hydro.bucketmodel({\n    params: {\n      baseflow: 10, // m\xb3/s\n      infiltration: 0.1 // mm/hour\n    },\n    args: {\n      agriculture: 0.3, // percent\n      barerock: 0.1, // percent\n      grassland: 0.2, // percent\n      forest: 0.3, // percent\n      urban: 0.1 // percent\n    },\n    data: {\n      rainfall: [10, 20, 30, 40, 50], // mm\n      evaporation: [5, 10, 15, 20, 25] // mm\n    }\n  });\n  //hydrolang.visualize.draw({ params: { type: 'json' }, data: bucket_runoff})\n};\nmain();",hidden:!1,active:!0},"index.html":'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <script src="https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"><\/script>\n    <title>My HydroLang Example</title>\n  </head>\n  <body>\n    <script src="src/main.js"><\/script>\n  </body>\n</html>',"package.json":{code:'{\n  "name": "examples",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.html",\n  "scripts": {\n    "start": "parcel index.html --open",\n    "build": "parcel build index.html"\n  },\n  "dependencies": {\n    "parcel-bundler": "^1.6.1"\n  },\n  "devDependencies": {\n    "@babel/core": "7.2.0",\n    "typescript": "4.4.4"\n  },\n  "resolutions": {\n    "@babel/preset-env": "7.13.8"\n  },\n  "keywords": []\n}',hidden:!0,active:!1}},mdxType:"Sandpack"}),(0,r.kt)("br",null),(0,r.kt)("admonition",{title:"Tip",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"More info about the hydro component in the ",(0,r.kt)("a",{parentName:"p",href:"https://uihilab.github.io/HydroLang/hydro_.html"},"documentation page"))))}h.isMDXComponent=!0}}]);