"use strict";(self.webpackChunkhydrolang_training=self.webpackChunkhydrolang_training||[]).push([[995],{192:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=a(7462),r=(a(7294),a(3905)),o=a(9423);const i={sidebar_position:1},s="Data",l={unversionedId:"tutorial/data",id:"tutorial/data",title:"Data",description:"HydroLang is a powerful tool that allows users to retrieve, clean, transform, upload, and download data. The data module is designed to provide easy access to data sources so users can choose the data that best suits their needs.",source:"@site/docs/tutorial/data.mdx",sourceDirName:"tutorial",slug:"/tutorial/data",permalink:"/tutorials/hydrolang/build/index.html/docs/tutorial/data",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial",permalink:"/tutorials/hydrolang/build/index.html/docs/category/tutorial"},next:{title:"Visualize",permalink:"/tutorials/hydrolang/build/index.html/docs/tutorial/visualize"}},d={},u=[{value:"Exercise 1",id:"exercise-1",level:2},{value:"Exercise 2",id:"exercise-2",level:2}],p={toc:u},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data"},"Data"),(0,r.kt)("p",null,"HydroLang is a powerful tool that allows users to retrieve, clean, transform, upload, and download data. The data module is designed to provide easy access to data sources so users can choose the data that best suits their needs."),(0,r.kt)("p",null,"HydroLang connects to various data sources around the world through different formats, data requests, and data sources using semantically-driven inputs. The available data sources include:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"AEMET"),(0,r.kt)("td",{parentName:"tr",align:null},"Spanish Meteorological Agency")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CUASHI HydroShare and WaterOneFlow"),(0,r.kt)("td",{parentName:"tr",align:null},"Open source tools for sharing hydrologic data and models")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"EAUK"),(0,r.kt)("td",{parentName:"tr",align:null},"Environment Agency of the United Kingdom")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"EPA"),(0,r.kt)("td",{parentName:"tr",align:null},"United States Environmental Protection Agency")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FEMA"),(0,r.kt)("td",{parentName:"tr",align:null},"Federal Emergency Management Agency")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IFIS"),(0,r.kt)("td",{parentName:"tr",align:null},"Iowa Flood Information System")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MeteoIT"),(0,r.kt)("td",{parentName:"tr",align:null},"Italian Meteorological Service")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MeteoStat"),(0,r.kt)("td",{parentName:"tr",align:null},"Weather Data Hosting Service")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NOAA"),(0,r.kt)("td",{parentName:"tr",align:null},"National Oceanic and Atmospheric Administration (United States)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"USGS"),(0,r.kt)("td",{parentName:"tr",align:null},"United States Geological Survey")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"World Bank"),(0,r.kt)("td",{parentName:"tr",align:null},"Global climeteology Projections")))),(0,r.kt)("admonition",{title:"Info",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Adding endpoints to HydroLang, for each data source or new data source, is simple enough that the users can do so if required. Please check the documentation for more info.")),(0,r.kt)("p",null,"These sources offer different types of input forcings for hydrological modeling, including streamflow, rainfall, and evapotranspiration, among others."),(0,r.kt)("p",null,"To submit a request, each data source requires specific variable definitions as parameters and arguments fed into the endpoint."),(0,r.kt)("h2",{id:"exercise-1"},"Exercise 1"),(0,r.kt)("p",null,'Let\'s retrieve daily record data from all available stations managed by USGS through CUAHSI data sources in the Salt Lake City Area. Define a variable named params to retrieve data from WaterOneFlow using the "Get Sites by Box Object" function.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let params = { source: "waterOneFlow", datatype: "GetSitesByBoxObject" }\n')),(0,r.kt)("admonition",{title:"Info",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The params object contains information about the data source, data type. These are the main parameters used to search within the data source endpoints, specify the data type within the data source. Additionally a proxy server can be passed as a resource in case there is need for one.")),(0,r.kt)("p",null,"Let's define another variable called args, which will contain specific information about the location from which we want to retrieve data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let args = {\n    sourceType: "USGS Daily Values",\n    east: -111.38,\n    west: -112.46,\n    north: 41.07,\n    south: 40.19\n}\n')),(0,r.kt)("admonition",{title:"Caution",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"args")," object contains information required by the source for the given data type. Users must explore the available source information to determine what information is needed for a query. It is essential for users to understand how to query an API correctly to avoid encountering confusing errors.")),(0,r.kt)("p",null,"With these two parameters set, we can query the location as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let availableStations = await hydro.data.retrieve({params, args})\n")),(0,r.kt)(o.xR,{template:"vanilla",options:{showTabs:!0,showLineNumbers:!0,showInlineErrors:!0,externalResources:["https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"]},files:{"src/index.js":{code:"",hidden:!0,active:!1},"src/main.js":{code:'const hydrolang = new Hydrolang();\nconst main = async () => {\n  let params = { source: "waterOneFlow", datatype: "GetSitesByBoxObject" }\n  let args = {\n    sourceType: "USGS Daily Values",\n    east: -111.38,\n    west: -112.46,\n    north: 41.07,\n    south: 40.19\n  }\n  let availableStations = await hydrolang.data.retrieve({params, args})\n  hydrolang.visualize.draw({ params: { type: \'json\' }, data: availableStations })\n};\nmain();',hidden:!1,active:!0},"index.html":'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <script src="https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"><\/script>\n    <title>My HydroLang Example</title>\n  </head>\n  <body>\n    <script src="src/main.js"><\/script>\n  </body>\n</html>',"package.json":{code:'{\n  "name": "examples",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.html",\n  "scripts": {\n    "start": "parcel index.html --open",\n    "build": "parcel build index.html"\n  },\n  "dependencies": {\n    "parcel-bundler": "^1.6.1"\n  },\n  "devDependencies": {\n    "@babel/core": "7.2.0",\n    "typescript": "4.4.4"\n  },\n  "resolutions": {\n    "@babel/preset-env": "7.13.8"\n  },\n  "keywords": []\n}',hidden:!0,active:!1}},mdxType:"Sandpack"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"Depending on the the number of requests sent to the server at the given time, it can take up to 5 seconds to retrieve the data."),(0,r.kt)("admonition",{title:"Tip",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Tip: To handle multiple objects with the same naming conventions, use object destructuring in your JavaScript code. This means you only need to pass params and args, instead of key-value pairs. And if you're worried about running asynchronous code, don't be scared! Just use the keyword 'await' to wait for an execution to complete before continuing with the program. Since we're retrieving data from an external server, it makes sense to 'wait', right? ")),(0,r.kt)("p",null,"We can see that there is a lot of information pertaining to the retrieved data. Let's use the transform function to clean it up. Let's keep only the station data we want to use."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let station_data = hydrolang.data.transform({\n    params: { save: \"site\"}, \n    args: { type: 'JSON'}, \n    data: availableStations\n})\n")),(0,r.kt)("p",null,"By doing this, we are declaring the stations to be saved as a JSON object so we can continue exploring more. We can see that this is giving us information about the stations and data availability, but not the data itself!"),(0,r.kt)("h2",{id:"exercise-2"},"Exercise 2"),(0,r.kt)("p",null,"Let\u2019s select one of the stations to get the information using another source, for example, the USGS API. We can do this by creating a new request that queries a given station using the following two variables."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let usgs_query = {\n    source: \"usgs\",\n    datatype: \"daily-values\",\n    transform: true\n};\n\nlet args_query = {\n    site: '10010000',\n    format: 'json',\n    startDt: '1900-01-01',\n    endDt: '2023-01-01'\n};\n")),(0,r.kt)("p",null,"We use once again the retrieve function which with an optional transform parameter for on the fly data transformation for further manipulation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let usgs_data = await hydrolang.data.retrieve({ params: usgs_query, args: args_query })\n")),(0,r.kt)("admonition",{title:"Note",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The transformation is done considering the structure of most responses from the data sources included within HydroLang. If you would like to see the structure before any manipulation do not use the parameter.")),(0,r.kt)("p",null,"We can visualize the data using the visualize function as we did before:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"hydrolang.visualize.draw({ params: { type: 'chart' }, data: usgs_data })\n")),(0,r.kt)("p",null,"Now, we have transformed the data into a JavaScript array that we can further use to manipulate information. We can either use this data as is or download it to our local machines using the download function available in the data module. We can do so by using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"hydrolang.data.download({ args: { type: 'CSV' }, data: usgs_data })\n")),(0,r.kt)(o.xR,{template:"vanilla",options:{showTabs:!0,showLineNumbers:!0,showInlineErrors:!0,externalResources:["https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"]},files:{"src/index.js":{code:"",hidden:!0,active:!1},"src/main.js":{code:"const hydrolang = new Hydrolang();\nconst main = async () => {\n  let usgs_query = {\n      source: \"usgs\",\n      datatype: \"daily-values\",\n      transform: true\n  };\n  let args_query = {\n      site: '10010000',\n      format: 'json',\n      startDt: '2000-01-01',\n      endDt: '2023-01-01'\n  };\n  let usgs_data = await hydrolang.data.retrieve({ params: usgs_query, args: args_query })\n  hydrolang.visualize.draw({ params: { type: 'chart', id:'retrieved-values' }, data: usgs_data })\n};\nmain();",hidden:!1,active:!0},"index.html":'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <script src="https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"><\/script>\n    <title>My HydroLang Example</title>\n  </head>\n  <body>\n    <script src="src/main.js"><\/script>\n  </body>\n</html>',"package.json":{code:'{\n  "name": "examples",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.html",\n  "scripts": {\n    "start": "parcel index.html --open",\n    "build": "parcel build index.html"\n  },\n  "dependencies": {\n    "parcel-bundler": "^1.6.1"\n  },\n  "devDependencies": {\n    "@babel/core": "7.2.0",\n    "typescript": "4.4.4"\n  },\n  "resolutions": {\n    "@babel/preset-env": "7.13.8"\n  },\n  "keywords": []\n}',hidden:!0,active:!1}},mdxType:"Sandpack"}),(0,r.kt)("br",null),(0,r.kt)("admonition",{title:"Note",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"We can download XML, CSV, and JSON formats, and we can assign a specific naming convention to the downloaded file. Otherwise, a random name will be generated using the format YYMMDDHHMM.")),(0,r.kt)("admonition",{title:"Tip",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"More info about the data module in the ",(0,r.kt)("a",{parentName:"p",href:"https://uihilab.github.io/HydroLang/data.html"},"documentation page"))))}m.isMDXComponent=!0}}]);