"use strict";(self.webpackChunkhydrolang_training=self.webpackChunkhydrolang_training||[]).push([[783],[,(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var t=n(7462),i=(n(7294),n(3905)),s=n(9423);const r={sidebar_position:2},l="Visualize",o={unversionedId:"tutorial/visualize",id:"tutorial/visualize",title:"Visualize",description:"The visualize module contains functions for drawing various charts, such as columns, bars, and pies, as well as tables using the Google Charts library.",source:"@site/docs/tutorial/visualize.mdx",sourceDirName:"tutorial",slug:"/tutorial/visualize",permalink:"/tutorials/hydrolang/build/index.html/docs/tutorial/visualize",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Data",permalink:"/tutorials/hydrolang/build/index.html/docs/tutorial/data"},next:{title:"Maps",permalink:"/tutorials/hydrolang/build/index.html/docs/tutorial/maps"}},d={},u=[{value:"Exercise 1",id:"exercise-1",level:2}],c={toc:u},p="wrapper";function h(e){let{components:a,...n}=e;return(0,i.kt)(p,(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"visualize"},"Visualize"),(0,i.kt)("p",null,"The visualize module contains functions for drawing various charts, such as columns, bars, and pies, as well as tables using the Google Charts library."),(0,i.kt)("h2",{id:"exercise-1"},"Exercise 1"),(0,i.kt)("p",null,"Let\u2019s create a simple example for rendering a bar and line graph using the following commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const hydrolang = new Hydrolang();\nhydrolang.visualize.draw({\n  params: { type: "chart" },\n  data: [1, 2, 3, 4, 5],\n});\n')),(0,i.kt)("p",null,"The default drawing type from the library is set to be a line chart. We can change this by passing an additional argument, as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'hydrolang.visualize.draw({\n  params: { type: "chart" },\n  args: { charttype: "column" },\n  data: [1, 2, 3, 4, 5],\n});\n')),(0,i.kt)(s.xR,{template:"vanilla",options:{showTabs:!0,showLineNumbers:!0,showInlineErrors:!0,externalResources:["https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"]},files:{"src/index.js":{code:"",hidden:!0,active:!1},"src/main.js":{code:"const hydrolang = new Hydrolang();\nconst main = async () => {\n  //Paste the chart code here\n};\nmain();",hidden:!1,active:!0},"index.html":'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <script src="https://cdn.jsdelivr.net/npm/hydrolang@1.1.7/hydrolang.js"><\/script>\n    <title>My HydroLang Example</title>\n  </head>\n  <body>\n    <script src="src/main.js"><\/script>\n  </body>\n</html>',"package.json":{code:'{\n  "name": "examples",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.html",\n  "scripts": {\n    "start": "parcel index.html --open",\n    "build": "parcel build index.html"\n  },\n  "dependencies": {\n    "parcel-bundler": "^1.6.1"\n  },\n  "devDependencies": {\n    "@babel/core": "7.2.0",\n    "typescript": "4.4.4"\n  },\n  "resolutions": {\n    "@babel/preset-env": "7.13.8"\n  },\n  "keywords": []\n}',hidden:!0,active:!1}},mdxType:"Sandpack"}),(0,i.kt)("br",null),(0,i.kt)("admonition",{title:"Note",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The visualize module can handle n-dimensional arrays to be passed as data, and it considers the first position to be date formats as strings, if available. The parameters used for rendering are dealt by HydroLang, but can be modified by the user if required.")),(0,i.kt)("p",null,"Let's see how we can use these tools in the next modules."),(0,i.kt)("admonition",{title:"Tip",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"More info about the data module in the ",(0,i.kt)("a",{parentName:"p",href:"https://uihilab.github.io/HydroLang/visualize.html"},"documentation page"))))}h.isMDXComponent=!0}]]);